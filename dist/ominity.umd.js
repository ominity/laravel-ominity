(function(d,o){typeof exports=="object"&&typeof module<"u"?o(exports):typeof define=="function"&&define.amd?define(["exports"],o):(d=typeof globalThis<"u"?globalThis:d||self,o(d.Ominity={}))})(this,function(d){"use strict";const o={config:{},init(){document.querySelectorAll("form.ominity-form[data-form]").forEach(e=>{var t;const i=e.getAttribute("data-form")||"",a=e.getAttribute("data-recaptcha"),c=(t=document.querySelector('meta[name="recaptcha-site-key"]'))==null?void 0:t.getAttribute("content");e.addEventListener("submit",l=>{const s=new CustomEvent("form:submit",{detail:{formId:i,recaptchaVersion:a},cancelable:!0});if(!e.dispatchEvent(s)){l.preventDefault();return}if(o.disableSubmitButtons(e),a==="v3"){if(typeof grecaptcha>"u"){console.warn("reCAPTCHA v3 is not loaded.");return}let n=e.querySelector('input[name="g-recaptcha-response"]');n||(n=document.createElement("input"),n.type="hidden",n.name="g-recaptcha-response",e.appendChild(n)),n.value===""&&(l.preventDefault(),grecaptcha.ready(()=>{grecaptcha.execute(c,{action:"submit"}).then(u=>{n.value=u,o.submitForm(e,i)})}))}else e.getAttribute("data-role")==="ajax"&&(l.preventDefault(),o.submitForm(e,i))})})},submitForm(e,i){e.getAttribute("data-role")==="ajax"?this.handleFormAjaxSubmit(e,i):e.submit()},handleFormAjaxSubmit(e,i){var c;const a=new FormData(e);e.querySelectorAll(".alert.alert-success").forEach(t=>t.remove()),fetch(e.action,{method:e.method||"POST",body:a,headers:{"X-Requested-With":"XMLHttpRequest","X-CSRF-TOKEN":((c=document.querySelector('meta[name="csrf-token"]'))==null?void 0:c.getAttribute("content"))||""}}).then(t=>t.json()).then(t=>{if(e.getAttribute("data-recaptcha")==="v3"){const s=e.querySelector('input[name="g-recaptcha-response"]');s&&(s.value="")}if(o.enableSubmitButtons(e),e.querySelectorAll(".has-validation").forEach(s=>s.classList.remove("has-validation")),e.querySelectorAll(".is-invalid").forEach(s=>s.classList.remove("is-invalid")),e.querySelectorAll(".invalid-feedback").forEach(s=>s.remove()),e.dispatchEvent(new CustomEvent("form:submitted",{detail:{formId:i,data:t}})),t.success){e.reset();const s=new CustomEvent("form:success",{detail:{formId:i,data:t},cancelable:!0});if(!!e.dispatchEvent(s)){const n=document.createElement("div");n.className="alert alert-success",n.textContent=(t==null?void 0:t.message)||"Your form was successfully submitted.",e.prepend(n)}}else if(t.errors){const s=new CustomEvent("form:errors",{detail:{formId:i,data:t},cancelable:!0});!e.dispatchEvent(s)||o.handleFormErrors(e,t.errors)}else e.dispatchEvent(new CustomEvent("form:unknown",{detail:{formId:i,data:t}}))}).catch(t=>{console.error("Form submit error:",t),e.dispatchEvent(new CustomEvent("form:fail",{detail:{formId:i,error:t}}))})},handleFormErrors(e,i){e.querySelectorAll(".has-validation").forEach(a=>a.classList.remove("has-validation")),e.querySelectorAll(".is-invalid").forEach(a=>a.classList.remove("is-invalid")),e.querySelectorAll(".invalid-feedback").forEach(a=>a.remove()),Object.entries(i).forEach(([a,c])=>{const t=c[0];let l=`[name="${a}"], [name="${a}[]"]`;if(a.includes(".")){const r=a.replace(/\./g,"][");l+=`, [name="${r}"]`}const s=e.querySelectorAll(l);if(s.length>0){let r=!1;if(s.forEach(n=>{if(n.type==="hidden"||n.offsetParent===null)o.showToast(t,"danger"),r=!0;else{n.classList.add("is-invalid");const b=n.closest(".input-group");b&&b.classList.add("has-validation")}}),!r){const n=s[0];n.type==="checkbox"||n.type==="radio"?s[s.length-1].insertAdjacentHTML("afterend",`<div class="invalid-feedback">${t}</div>`):n.insertAdjacentHTML("afterend",`<div class="invalid-feedback">${t}</div>`)}}else o.showToast(t,"danger")})},showToast(e,i="danger"){typeof o.config.toastHandler=="function"?o.config.toastHandler({type:i,message:e}):typeof window.$<"u"&&typeof window.$.fn.showToast=="function"?window.$.fn.showToast({type:i,title:e}):console.warn(`[${i.toUpperCase()}] ${e}`)},enableSubmitButtons(e){if(o.config.disableSubmitDuringRequest!==!1){const a=e.getAttribute("data-form")||"",c=new CustomEvent("form:submit-enabled",{detail:{formId:a},cancelable:!0});!e.dispatchEvent(c)||e.querySelectorAll('button[type="submit"]').forEach(s=>{s.disabled=!1,s.classList.remove("disabled")})}},disableSubmitButtons(e){if(o.config.disableSubmitDuringRequest!==!1){const a=e.getAttribute("data-form")||"",c=new CustomEvent("form:submit-disabled",{detail:{formId:a},cancelable:!0});!e.dispatchEvent(c)||e.querySelectorAll('button[type="submit"]').forEach(s=>{s.disabled=!0,s.classList.add("disabled")})}}};window.OminityForms=o,d.OminityForms=o,Object.defineProperty(d,Symbol.toStringTag,{value:"Module"})});
