{"version":3,"file":"ominity.js","sources":["../resources/ts/forms.ts","../resources/ts/index.ts"],"sourcesContent":["interface OminityFormsConfig {\n    toastHandler?: (options: { type: string; message: string }) => void;\n    disableSubmitDuringRequest?: boolean;\n    enableTracking?: boolean;\n    gtagEvents?: {\n        successEvent?: string;\n        errorEvent?: string;\n        unknownEvent?: string;\n        submitEvent?: string;\n        defaultParams?: Record<string, any>;\n    }\n}\n\ninterface AjaxResponse {\n    success: boolean;\n    data?: any;\n    errors?: Record<string, string[]>;\n    message?: string;\n}\n\nconst OminityForms = {\n    config: {} as OminityFormsConfig,\n\n     init(): void {\n        document.addEventListener('submit', (e: Event) => {\n            const form = e.target as HTMLFormElement;\n            if (!(form instanceof HTMLFormElement)) return;\n\n            // Only handle forms managed by Ominity\n            if (!form.matches('form.ominity-form[data-form]')) return;\n\n            const formId = form.getAttribute('data-form') || '';\n            const recaptchaVersion = form.getAttribute('data-recaptcha');\n            const siteKey = document.querySelector('meta[name=\"recaptcha-site-key\"]')?.getAttribute('content');\n\n            const event = new CustomEvent('form:submit', { detail: { formId, recaptchaVersion }, cancelable: true });\n            const wasPrevented = !form.dispatchEvent(event);\n            if (wasPrevented) {\n                e.preventDefault();\n                return;\n            }\n\n            this.disableSubmitButtons(form);\n\n            if (recaptchaVersion === 'v3') {\n                e.preventDefault();\n\n                if (typeof grecaptcha === 'undefined') {\n                    console.warn('reCAPTCHA v3 is not loaded.');\n                    return;\n                }\n\n                let recaptchaInput = form.querySelector<HTMLInputElement>('input[name=\"g-recaptcha-response\"]');\n                if (!recaptchaInput) {\n                    recaptchaInput = document.createElement('input');\n                    recaptchaInput.type = 'hidden';\n                    recaptchaInput.name = 'g-recaptcha-response';\n                    form.appendChild(recaptchaInput);\n                }\n\n                grecaptcha.ready(() => {\n                    grecaptcha.execute(siteKey!, { action: 'submit' }).then((token: string) => {\n                        recaptchaInput!.value = token;\n                        this.submitForm(form, formId);\n                    });\n                });\n            }\n            else if (form.getAttribute('data-role') === 'ajax') {\n                e.preventDefault();\n                this.submitForm(form, formId);\n            }\n        });\n    },\n\n    submitForm(form: HTMLFormElement, formId: string): void {\n        this.fireFormGtag(form, 'submit');\n        \n        if (form.getAttribute('data-role') === 'ajax') {\n            this.handleFormAjaxSubmit(form, formId);\n        } else {\n            form.submit();\n        }\n    },\n\n    handleFormAjaxSubmit(form: HTMLFormElement, formId: string): void {\n        const formData = new FormData(form);\n\n        // Clear success messages\n        form.querySelectorAll('.alert.alert-success').forEach(el => el.remove());\n\n        fetch(form.action, {\n            method: form.method || 'POST',\n            body: formData,\n            headers: {\n                'X-Requested-With': 'XMLHttpRequest',\n                'X-CSRF-TOKEN': document.querySelector('meta[name=\"csrf-token\"]')?.getAttribute('content') || '',\n            }\n        })\n        .then(response => response.json())\n        .then((data: AjaxResponse) => {\n            // Handle reCAPTCHA v3 token reset\n            const recaptchaVersion = form.getAttribute('data-recaptcha');\n            if (recaptchaVersion === 'v3') {\n                const recaptchaInput = form.querySelector<HTMLInputElement>('input[name=\"g-recaptcha-response\"]');\n                if (recaptchaInput) {\n                    recaptchaInput.value = ''; // reset token after use\n                }\n            }\n\n            OminityForms.enableSubmitButtons(form);\n\n            // Clear validation states\n            form.querySelectorAll('.has-validation').forEach(el => el.classList.remove('has-validation'));\n            form.querySelectorAll('.is-invalid').forEach(el => el.classList.remove('is-invalid'));\n            form.querySelectorAll('.invalid-feedback').forEach(el => el.remove());\n\n            form.dispatchEvent(new CustomEvent('form:submitted', { detail: { formId, data } }));\n\n            if (data.success) {\n                form.reset();\n\n                const event = new CustomEvent('form:success', { detail: { formId, data }, cancelable: true });\n                const wasPrevented = !form.dispatchEvent(event);\n\n                if (!wasPrevented) {\n                    this.fireFormGtag(form, 'success');\n                    const alert = document.createElement('div');\n                    alert.className = 'alert alert-success';\n                    alert.textContent = data?.message || 'Your form was successfully submitted.';\n                    form.prepend(alert);\n                }\n            } else if (data.errors) {\n                this.fireFormGtag(form, 'error');\n                const event = new CustomEvent('form:errors', { detail: { formId, data }, cancelable: true });\n                const wasPrevented = !form.dispatchEvent(event);\n\n                if (!wasPrevented) {\n                    OminityForms.handleFormErrors(form, data.errors);\n                }\n            } else {\n                this.fireFormGtag(form, 'unknown');\n                form.dispatchEvent(new CustomEvent('form:unknown', { detail: { formId, data } }));\n            }\n        })\n        .catch(error => {\n            console.error('Form submit error:', error);\n            form.dispatchEvent(new CustomEvent('form:fail', { detail: { formId, error } }));\n        });\n    },\n\n    handleFormErrors(form: HTMLFormElement, errors: Record<string, string[]>): void {\n        form.querySelectorAll('.has-validation').forEach(el => el.classList.remove('has-validation'));\n        form.querySelectorAll('.is-invalid').forEach(el => el.classList.remove('is-invalid'));\n        form.querySelectorAll('.invalid-feedback').forEach(el => el.remove());\n\n        Object.entries(errors).forEach(([field, messageArray]) => {\n            const message = messageArray[0];\n\n            let selector = `[name=\"${field}\"], [name=\"${field}[]\"]`;\n            if (field.includes('.')) {\n                const flatField = field.replace(/\\./g, '][');\n                selector += `, [name=\"${flatField}\"]`;\n            }\n\n            const inputElements = form.querySelectorAll<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>(selector);\n\n            if (inputElements.length > 0) {\n                let handled = false;\n\n                inputElements.forEach(input => {\n                    const isHidden = input.type === 'hidden' || input.offsetParent === null;\n\n                    if (isHidden) {\n                        OminityForms.showToast(message, 'danger');\n                        handled = true;\n                    } else {\n                        input.classList.add('is-invalid');\n\n                        const inputGroup = input.closest('.input-group');\n                        if (inputGroup) {\n                            inputGroup.classList.add('has-validation');\n                        }\n                    }\n                });\n\n                if (!handled) {\n                    const firstInput = inputElements[0];\n                    const isCheckboxOrRadio = firstInput.type === 'checkbox' || firstInput.type === 'radio';\n\n                    if (isCheckboxOrRadio) {\n                        const lastInput = inputElements[inputElements.length - 1];\n                        lastInput.insertAdjacentHTML('afterend', `<div class=\"invalid-feedback\">${message}</div>`);\n                    } else {\n                        firstInput.insertAdjacentHTML('afterend', `<div class=\"invalid-feedback\">${message}</div>`);\n                    }\n                }\n            } else {\n                OminityForms.showToast(message, 'danger');\n            }\n        });\n    },\n\n    showToast(message: string, type = 'danger'): void {\n        if (typeof OminityForms.config.toastHandler === 'function') {\n            OminityForms.config.toastHandler({ type, message });\n        } else if (typeof window.$ !== 'undefined' && typeof (window.$ as any).fn.showToast === 'function') {\n            (window.$ as any).fn.showToast({ type, title: message });\n        } else {\n            console.warn(`[${type.toUpperCase()}] ${message}`);\n        }\n    },\n\n    enableSubmitButtons(form: HTMLFormElement): void {\n        const disableSubmit = OminityForms.config.disableSubmitDuringRequest !== false;\n        if (disableSubmit) {\n            const formId = form.getAttribute('data-form') || '';\n            const event = new CustomEvent('form:submit-enabled', { detail: { formId }, cancelable: true });\n            const wasPrevented = !form.dispatchEvent(event);\n            if (!wasPrevented) {\n                const submitButtons = form.querySelectorAll<HTMLButtonElement>('button[type=\"submit\"]');\n                submitButtons.forEach(btn => {\n                    btn.disabled = false;\n                    btn.classList.remove('disabled');\n                });\n            }\n        }\n    },\n\n    disableSubmitButtons(form: HTMLFormElement): void {\n        const disableSubmit = OminityForms.config.disableSubmitDuringRequest !== false;\n        if (disableSubmit) {\n            const formId = form.getAttribute('data-form') || '';\n            const event = new CustomEvent('form:submit-disabled', { detail: { formId }, cancelable: true });\n            const wasPrevented = !form.dispatchEvent(event);\n            if (!wasPrevented) {\n                const submitButtons = form.querySelectorAll<HTMLButtonElement>('button[type=\"submit\"]');\n                submitButtons.forEach(btn => {\n                    btn.disabled = true;\n                    btn.classList.add('disabled');\n                });\n            }\n        }\n    },\n\n    fireFormGtag(form: HTMLFormElement, type: 'success' | 'error' | 'unknown' | 'submit', extraParams?: Record<string, any>) {\n        if (this.config.enableTracking === false) {\n            return;\n        }\n\n        const formId = form.getAttribute('data-form') || '';\n\n        const typeMap: Record<string, string> = {\n            success: this.config.gtagEvents?.successEvent || 'form_submission',\n            error: this.config.gtagEvents?.errorEvent || 'form_submission_error',\n            unknown: this.config.gtagEvents?.unknownEvent || 'form_submission_unknown',\n            submit: this.config.gtagEvents?.submitEvent || 'form_submission_attempt'\n        };\n\n        const attrOverride = form.getAttribute(`data-gtag-${type}-event`)?.trim() || undefined;\n        const eventName = attrOverride || typeMap[type];\n\n        if (!eventName) return;\n\n        const eventParams = {\n            form_id: formId,\n            ...(this.config.gtagEvents?.defaultParams || {}),\n            ...(extraParams || {})\n        };\n\n        if (typeof window.gtag === 'function') {\n            window.gtag('event', eventName, eventParams);\n        }\n    }\n};\n\nexport default OminityForms;\n","import OminityForms from './forms';\n\nwindow.OminityForms = OminityForms;\n\nexport {\n    OminityForms,\n};\n"],"names":["OminityForms","_a","form","formId","recaptchaVersion","siteKey","event","recaptchaInput","token","formData","el","response","data","alert","error","errors","field","messageArray","message","selector","flatField","inputElements","handled","input","inputGroup","firstInput","type","btn","extraParams","_b","_c","_d","_e","_f","typeMap","eventName","eventParams"],"mappings":"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"}